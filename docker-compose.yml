version: '3.8'

services:
  postgres:
    restart: 'always'
    image: postgres:15.4-alpine
    networks:
      - db
      - server
    volumes:
      - ./todo.sql:/docker-entrypoint-initdb.d/schema.sql
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      timeout: 2s
      interval: 5s
      retries: 10
    ports:
      - "5432:5432"

  pgadmin:
    image: dpage/pgadmin4
    restart: 'always'
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:9777"
    depends_on:
      - postgres
    networks:
      - db

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    networks:
      - kafka

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: control-center
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_CONNECT_CLUSTER: kafka:9092
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 2
      CONTROL_CENTER_CONNECT_CONTROL_CENTER_ENABLED: 'true'
    networks:
      - kafka

  server:
    depends_on:
      - postgres
      - kafka
    restart: 'always'
    image: ai23m046/zephyr_server
    env_file:
      - .env
    networks:
      - server
      - ui
      - kafka
    ports:
      - "8080:80"
    links:
      - "postgres:database"

  frontend:
    depends_on:
      - server
    restart: 'always'
    image: ai23m046/zephyr_ui
    networks:
      - ui
    ports:
      - "8088:8080"
    links:
      - "server:api"

  ml_microservice:
    restart: 'always'
    depends_on:
      - kafka
    image: ai23m046/zephyr_ml_service
    env_file:
      - ml_microservice/.env
    networks:
      - kafka

  rs_service:
    restart: 'always'
    depends_on:
      - kafka
    image: ai23m046/zephyr_rs_service
    env_file:
      - rs_service/.env
    networks:
      - kafka

volumes:
  kafka:
  zookeeper:

networks:
  db:
  server:
  ui:
  kafka:
    driver: bridge
